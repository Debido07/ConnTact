#! /usr/bin/env python3

# Copyright 2021 Southwest Research Institute
# Licensed under the Apache License, Version 2.0

import rospy
import numpy as np
import tf2_ros
import abc
from geometry_msgs.msg import WrenchStamped, Wrench, TransformStamped, PoseStamped, Pose, Point, Quaternion, Vector3, Transform
from std_msgs.msg import String

from conntact.spiral_search import SpiralSearch
from conntact.ros_conntact_interface import ConntactROSInterface
from conntact.assembly_tools import AssemblyTools


def read_board_positions(target_hole: str, params: dict):
    """ Calculates pose of target hole relative to robot base frame.
    """
    temp_z_position_offset = 207  # Our robot is reading Z positions wrong on the pendant for some reason.
    task_pos = list(np.array(params['environment_state']['task_frame']['position']))
    task_pos[2] = task_pos[2] + temp_z_position_offset
    task_ori = params['environment_state']['task_frame']['orientation']

    hole_pos = list(np.array(params['objects'][target_hole]['local_position']))
    hole_pos[2] = hole_pos[2] + temp_z_position_offset
    hole_ori = params['objects'][target_hole]['local_orientation']

    # Set up target hole pose
    tf_robot_to_task_board = AssemblyTools.get_tf_from_yaml(task_pos, task_ori, "base_link", "task_board")
    pose_task_board_to_hole = AssemblyTools.get_pose_from_yaml(hole_pos, hole_ori, "base_link")
    target_hole_pose = tf2_geometry_msgs.do_transform_pose(pose_task_board_to_hole, tf_robot_to_task_board)
    # self.target_broadcaster = tf2_geometry_msgs.do_transform_pose(self.pose_task_board_to_hole, self.tf_robot_to_task_board)
    targetHoleTF = AssemblyTools.swap_pose_tf(target_hole_pose, "target_hole_position")
    self.reference_frames['target_hole_position'] = targetHoleTF
    # self.send_reference_TFs()
    self.x_pos_offset = self.target_hole_pose.pose.position.x
    self.y_pos_offset = self.target_hole_pose.pose.position.y

    return targetHoleTF


if __name__ == '__main__':
    rospy.init_node("demo_assembly_application_compliance")

    refresh_rate    = 100
    interface       = ConntactROSInterface("conntact_params")
    conntext        = AssemblyTools(interface)

    params = interface.load_yaml_file("peg_in_hole_params.yaml")

    # do pathing stuff then:
    assembly_application = SpiralSearch(refresh_rate, conntext, interface)
    assembly_application.main()

